%description:
Verifies that the output buffer does not send a flow control packet
while in the INSIDE_PACKET state.

%inifile: omnetpp.ini

Test.obuf.credMinTime = 0.256us
Test.obuf.size = 36
Test.obuf.width = 4
Test.obuf.maxVL = 0

%file: test.ned

import ib_model.IBOutBuf;
import ib_model.IB4XQDRWire;

network Test
{
    submodules:
        mock: Mock;
        obuf: IBOutBuf;

    connections:
        mock.out --> ned.IdealChannel --> obuf.in;
        mock.txCred --> ned.IdealChannel --> obuf.rxCred;
        mock.in <-- IB4XQDRWire <-- obuf.out;
        mock.free <-- ned.IdealChannel <-- obuf.free;
};

%file: mock.ned

simple Mock
{
    gates:
        output out;
        output txCred;
        input in;
        input free;
};

%file: mock.cc

#include <omnetpp.h>
#include "ib_m.h"

namespace @TESTNAME@ {

class Mock : public cSimpleModule {
public:
    virtual void initialize() override;
    virtual void handleMessage(cMessage *msg) override;

private:
    void handleData(IBDataMsg *msg);
    void handleFlowControl(IBFlowControl *msg);
    void handleFree(IBFreeMsg *msg);
    cMessage *endMsg;
    simtime_t initTime;
    unsigned int flowControlCount = 0;
    unsigned int dataCount = 0;
    unsigned int latestFCTBS;
    unsigned int latestFCCL;
};

Define_Module(Mock);

void Mock::initialize()
{
    flowControlCount = 0;
    dataCount = 0;
    initTime = SimTime::parse("1us");

    endMsg = new cMessage();
    scheduleAt(SimTime::parse("1ms"), endMsg);

    IBDataMsg *outMsg = new IBDataMsg("TEST", IB_DATA_MSG);
    outMsg->setName("TEST");
    outMsg->setVL(0);
    outMsg->setAppIdx(0);
    outMsg->setMsgIdx(0);
    outMsg->setMsgLen(1);
    outMsg->setPktIdx(0);
    outMsg->setPacketId(0);
    outMsg->setPacketSn(0);
    outMsg->setFlitSn(0);
    outMsg->setPacketLength(10);
    outMsg->setPacketLengthBytes(640);
    outMsg->setDstLid(2);
    outMsg->setSrcLid(1);
    outMsg->setSL(0);
    outMsg->setUseStatic(1);
    outMsg->setBeforeAnySwitch(true);
    /* cPacket field required for valid transmission delay */
    outMsg->setByteLength(640);

    sendDelayed(outMsg, initTime, "out");

    IBRxCredMsg *credMsg = new IBRxCredMsg("rxcred-test-msg", IB_RXCRED_MSG);
    credMsg->setVL(0);
    credMsg->setFCCL(10);
    sendDelayed(credMsg, initTime + SimTime::parse("10ns"), "out");
}

void Mock::handleData(IBDataMsg *msg)
{
    if (msg->getArrivalGateId() != gate("in")->getId()) {
        std::cout << "ERROR: Wrong gate\n";
    }

    ++dataCount;

    cChannel *chan = msg->getArrivalGate()->getIncomingTransmissionChannel();
    simtime_t delay = dataCount * chan->calculateDuration(msg);
    std::cout << "Expected message delay " << delay << "\n";
    if (simTime() < (initTime + delay)) {
        std::cout << "ERROR: Message arrived too early at time " << simTime()
	          << " (sent too soon by obuf?)\n";
    }
}

void Mock::handleFlowControl(IBFlowControl *msg)
{
    flowControlCount++;

    if (flowControlCount > 1) {
        std::cout << "ERROR: obuf sent flow control packet while inside data packet\n";
    }

    std::cout << "Was flow control message #" << flowControlCount << '\n';
    latestFCTBS = msg->getFCTBS();
    latestFCCL = msg->getFCCL();
}

void Mock::handleFree(IBFreeMsg *msg)
{
    /* we don't really care since we are just mocking the VLARB and
     * won't be sending any more flits in any case */
}

void Mock::handleMessage(cMessage *msg)
{
    if (msg == endMsg) {
        /* Special message to end simulation */
        delete msg;
        this->endSimulation();
    }

    std::cout << "Got message at time " << simTime() << "\n";
    switch (msg->getKind()) {
    case IB_DATA_MSG:
        handleData((IBDataMsg *)msg);
        break;
    case IB_FLOWCTRL_MSG:
        handleFlowControl((IBFlowControl *)msg);
        break;
    case IB_FREE_MSG:
        handleFree((IBFreeMsg *)msg);
        break;
    default:
        std::cout << "ERROR: Unexpected message kind "
		  << cEnum::get("IB_MSGS")->getStringFor(msg->getKind())
	          << "\n";
    }

    delete msg;
}

}


%not-contains: stdout
ERROR
